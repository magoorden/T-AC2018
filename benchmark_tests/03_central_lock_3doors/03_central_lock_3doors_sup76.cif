uncontrollable cod_er;
uncontrollable cod_ser;
controllable inc_ctr_WSP;
controllable reset_ctr_WSP;
uncontrollable ctr_ge_max_WSP;
uncontrollable ctr_lt_max_WSP;
controllable MER_an_FT;
controllable MER_an_BT;
controllable MER_an_HT;
controllable MER_aus_FT;
controllable MER_aus_BT;
controllable MER_aus_HT;
controllable MVR_an_HT;
controllable MVR_aus_HT;
controllable MVR_an_FT;
controllable MVR_an_BT;
controllable MVR_aus_FT;
controllable MVR_aus_BT;
uncontrollable STZV_FT;
uncontrollable STZV_BT;
controllable MZS_an_HT;
controllable MZS_aus_HT;
controllable time_WSP;
controllable time_FS;
controllable reset_WSP;
controllable reset_FS;
uncontrollable timeout_WSP;
uncontrollable timeout_FS;
uncontrollable tuer_zu_FT;
uncontrollable tuer_zu_BT;
uncontrollable tuer_zu_HT;
uncontrollable tuer_auf_FT;
uncontrollable tuer_auf_BT;
uncontrollable tuer_auf_HT;
controllable time_W_FT;
controllable time_ER_FT;
controllable time_VR_FT;
controllable time_ZS_FT;
controllable reset_FT;
controllable time_W_BT;
controllable time_ER_BT;
controllable time_VR_BT;
controllable time_ZS_BT;
controllable reset_BT;
controllable time_W_HT;
controllable time_ER_HT;
controllable time_VR_HT;
controllable time_ZS_HT;
controllable reset_HT;
uncontrollable timeout_FT;
uncontrollable timeout_BT;
uncontrollable timeout_HT;
uncontrollable zuendung_an;
uncontrollable zuendung_aus;
controllable soft_ER;
controllable soft_SER_FT;
controllable SERFS;
controllable soft_CS;
controllable ER;
controllable SER;
controllable ZS;
controllable TAST;
controllable wsp;
controllable soft_VR;
controllable soft_ZS;
controllable autom_VR;
controllable is_cod_er;
controllable is_cod_ser;
controllable done_ZS;
controllable CS_ok;
uncontrollable CS;
controllable ZSA;
controllable ZSI;
uncontrollable ER_FT;
uncontrollable ER_BT;
uncontrollable ER_HK;
uncontrollable ER_FS;
uncontrollable VR_FT;
uncontrollable VR_BT;
uncontrollable VR_HK;
uncontrollable VR_FS;
uncontrollable TASTVR;
controllable kein_ZS;
controllable start_ER_FT;
controllable stop_ER_FT;
controllable done_ER;
controllable done_SER_FT;
controllable start_VR_FT;
controllable stop_VR_FT;
controllable done_VR;
controllable start_ZS_FT;
controllable stop_ZS_FT;
controllable sync_FT;
controllable async_FT;
controllable start_ER_BT;
controllable stop_ER_BT;
controllable start_VR_BT;
controllable stop_VR_BT;
controllable start_ZS_BT;
controllable stop_ZS_BT;
controllable sync_BT;
controllable async_BT;
controllable start_ER_HT;
controllable stop_ER_HT;
controllable start_VR_HT;
controllable stop_VR_HT;
controllable start_ZS_HT;
controllable stop_ZS_HT;
controllable sync_HT;
controllable async_HT;
plant automaton Mer_HT:
  location IDLE:
    initial;
    marked;
    edge MER_an_HT goto RUN;
  location RUN:
    edge MER_aus_HT goto IDLE;
end
plant automaton Mvr_HT:
  location IDLE:
    initial;
    marked;
    edge MVR_an_HT goto RUN;
  location RUN:
    edge MVR_aus_HT goto IDLE;
end
plant automaton Mzs_HT:
  location IDLE:
    initial;
    marked;
    edge MZS_an_HT goto RUN;
  location RUN:
    edge MZS_aus_HT goto IDLE;
end
plant automaton ttimer_HT:
  location IDLE:
    initial;
    marked;
    edge time_W_HT, time_ER_HT, time_VR_HT, time_ZS_HT goto RUN;
  location RUN:
    edge reset_HT, timeout_HT goto IDLE;
end
plant automaton P4:
  location:
    initial;
    marked;
    edge soft_CS;
end
plant automaton P49:
  location:
    initial;
    marked;
    edge start_ER_HT;
end
plant automaton P50:
  location:
    initial;
    marked;
    edge stop_ER_HT;
end
plant automaton P51:
  location:
    initial;
    marked;
    edge start_VR_HT;
end
plant automaton P52:
  location:
    initial;
    marked;
    edge stop_VR_HT;
end
plant automaton P53:
  location:
    initial;
    marked;
    edge start_ZS_HT;
end
plant automaton P54:
  location:
    initial;
    marked;
    edge stop_ZS_HT;
end
supervisor automaton tmotor2_HT:
  location IN:
    initial;
    marked;
    edge start_ER_HT goto er1;
    edge start_VR_HT goto vr1;
    edge start_ZS_HT goto zs1;
    edge MER_aus_HT, MVR_aus_HT, MZS_aus_HT, reset_HT, timeout_HT;
    edge soft_CS goto IN;
  location er1:
    edge time_ER_HT goto er2;
    edge soft_CS goto IN;
  location er2:
    edge MER_an_HT goto er3;
    edge timeout_HT goto er4;
    edge soft_CS goto IN;
  location er3:
    edge timeout_HT goto er4;
    edge soft_CS goto IN;
  location er4:
    edge stop_ER_HT goto IN;
    edge MER_aus_HT;
    edge soft_CS goto IN;
  location vr1:
    edge time_VR_HT goto vr2;
    edge soft_CS goto IN;
  location vr2:
    edge MVR_an_HT goto vr3;
    edge timeout_HT goto vr4;
    edge soft_CS goto IN;
  location vr3:
    edge timeout_HT goto vr4;
    edge soft_CS goto IN;
  location vr4:
    edge stop_VR_HT goto IN;
    edge MVR_aus_HT;
    edge soft_CS goto IN;
  location zs1:
    edge time_ZS_HT goto zs2;
    edge soft_CS goto IN;
  location zs2:
    edge MZS_an_HT goto zs3a;
    edge MVR_an_HT goto zs3b;
    edge timeout_HT goto zs5;
    edge soft_CS goto IN;
  location zs3a:
    edge MVR_an_HT goto zs4;
    edge timeout_HT goto zs5;
    edge soft_CS goto IN;
  location zs3b:
    edge MZS_an_HT goto zs4;
    edge timeout_HT goto zs5;
    edge soft_CS goto IN;
  location zs4:
    edge timeout_HT goto zs5;
    edge soft_CS goto IN;
  location zs5:
    edge stop_ZS_HT goto IN;
    edge MVR_aus_HT, MZS_aus_HT;
    edge soft_CS goto IN;
end
supervisor automaton sup76:
  alphabet MER_an_HT, MER_aus_HT, MVR_an_HT, MVR_aus_HT, MZS_an_HT, MZS_aus_HT, time_W_HT, time_ER_HT, time_VR_HT, time_ZS_HT, reset_HT, soft_CS, start_ER_HT, stop_ER_HT, start_VR_HT, stop_VR_HT, start_ZS_HT, stop_ZS_HT;
  location:
    initial;
    marked;
    edge MER_an_HT when true;
    edge MER_aus_HT when true;
    edge MVR_an_HT when true;
    edge MVR_aus_HT when true;
    edge MZS_an_HT when true;
    edge MZS_aus_HT when true;
    edge reset_HT when true;
    edge soft_CS when true;
    edge start_ER_HT when ttimer_HT.IDLE;
    edge start_VR_HT when ttimer_HT.IDLE;
    edge start_ZS_HT when ttimer_HT.IDLE;
    edge stop_ER_HT when true;
    edge stop_VR_HT when true;
    edge stop_ZS_HT when true;
    edge time_ER_HT when true;
    edge time_VR_HT when true;
    edge time_W_HT when tmotor2_HT.IN;
    edge time_ZS_HT when true;
end
