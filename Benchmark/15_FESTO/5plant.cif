import "Definitions.cif";

//PROCESSING

//Plant:
//Sensors
S_atinput        : TwoStateSensor(false);
S_attest         : TwoStateSensor(false);
S_atdrill        : TwoStateSensor(false);
S_atexit         : TwoStateSensor(false);
S_atspare        : TwoStateSensor(false);
S_clamp          : TwoStateSensor(false);
S_test_ok        : TwoStateSensor(false);
S_drill_up       : TwoStateSensor(true);
S_drill_down     : TwoStateSensor(false);
S_turntable      : TwoStateSensor(true);
S_sortingbusy    : TwoStateSensor(true); //This sensor is not used as communication is not needed
S_Pinitialized   : TwoStateSensor(false);

//Actuators
A_drill           : TwoStateActuator(false);
A_turntable       : TwoStateActuator(false);
A_drilldown       : TwoStateActuator(false);
A_drillup         : TwoStateActuator(true);
A_clamp           : TwoStateActuator(false);
A_tester          : TwoStateActuator(false);
A_eject           : TwoStateActuator(false);
A_processingready : TwoStateActuator(false); //The corresponding sensors is never used

plant Timer:
    controllable c_on, c_reset; uncontrollable u_timeout;
    location Off:
        initial; marked;
        edge c_on goto Running;
    location Running:
        edge u_timeout goto Timeout;
        edge c_reset goto Off;
    location Timeout:
        edge c_reset goto Off;
end

//Dynamics
//drill dynamics, sensors are mutually exclusive
plant PDynamics:
    location: initial; marked;
        edge S_drill_up.u_on   when S_drill_down.Off;
        edge S_drill_down.u_on when S_drill_up.Off;
end

//Requirements
//Initialization
//Actuators are only allowed to enable/disable when the station is initialized
requirement {A_drill.c_on, A_drill.c_off, A_turntable.c_on, A_turntable.c_off,
             A_drilldown.c_on, A_drillup.c_off, A_clamp.c_on, A_clamp.c_off,
             A_tester.c_on, A_tester.c_off, A_eject.c_on, A_eject.c_off,
             A_processingready.c_on, A_processingready.c_off}
      needs S_Pinitialized.On;

requirement Timer.c_on    needs S_turntable.On;
requirement Timer.c_reset needs S_turntable.Off;

//Turn table
//The turn table is only allowed to enable at a valid positions
requirement A_turntable.c_on  needs S_turntable.On;

requirement A_turntable.c_on needs Timer.Timeout;

//The turn table is only allowed to disable at a invalid position, this generates a pulse
requirement A_turntable.c_off needs S_turntable.Off;

//The turn table is only allowed to enable when it is safe!
requirement A_turntable.c_on  needs S_drill_up.On;
requirement A_turntable.c_on  needs S_clamp.Off;
requirement A_turntable.c_on  needs A_eject.Off;
requirement A_turntable.c_on  needs A_drill.Off;
requirement A_turntable.c_on  needs A_tester.Off;

//The turn table is only allowed to enable when a new product has entered
requirement A_turntable.c_on  needs S_atinput.On;

//Tester
//The tester is only allowed to enable when the turn table is at standstill
requirement A_tester.c_on  needs S_turntable.On;
requirement A_tester.c_on  needs A_turntable.Off;
requirement A_tester.c_on  needs Timer.Timeout;

//The tester is only allowed to enable when there is a product
requirement A_tester.c_on  needs S_attest.On;

//The tester is only allowed to disable when the test is ok.
requirement A_tester.c_off needs S_test_ok.On;

//Actuator relations:
requirement Tester:
    location One:
        initial; marked;
        edge A_turntable.c_on;
        edge A_tester.c_on    goto Two;
    location Two:
        edge A_tester.c_off   goto Three;
    location Three:
        edge A_turntable.c_on goto One;
end


//Clamp
//The clamp is only allowed to enable when the turn table is at standstill
requirement A_clamp.c_on  needs S_turntable.On;
requirement A_clamp.c_on  needs A_turntable.Off;
requirement A_clamp.c_on  needs Timer.Timeout;

//The clamp is only allowed to enable when a product is available
requirement A_clamp.c_on  needs S_atdrill.On;

//The Clamp is only allowed to disable when the drill is at the top position
requirement A_clamp.c_off needs S_drill_up.On;

//The clamp is only allowed to disable when the drill is powered off
//requirement A_clamp.c_off needs A_drill.Off;


//Dril
//The drill is only allowed to enable at the upper position
requirement A_drill.c_on  needs S_drill_up.On;

//The drill is only allowed to enable when a product is clamped
requirement A_drill.c_on  needs S_clamp.On;

//The drill is only allowed to disable at the bottom position
requirement A_drill.c_off needs S_drill_down.On;


//Drill movement
//The drill is only allowed to descend when it is fully ascended
requirement {A_drillup.c_off, A_drilldown.c_on} needs S_drill_up.On;

//The drill is only allowed to ascend  when it is fully descended
requirement {A_drillup.c_on, A_drilldown.c_off} needs S_drill_down.On;

//Actuator relations:
requirement ClampDrill:
    location one:
        initial; marked;
        edge A_turntable.c_on;
        edge A_clamp.c_on      goto two;
    location two:
        edge A_drill.c_on      goto three;
    location three:
        edge A_drillup.c_off   goto four;
    location four:
        edge A_drilldown.c_on  goto five;
    location five:
        edge A_drilldown.c_off goto six;
    location six:
        edge A_drillup.c_on    goto seven;
    location seven:
        edge A_drill.c_off     goto eight;
    location eight:
        edge A_clamp.c_off     goto nine;
    location nine:
        edge A_turntable.c_on  goto one;
end


//Eject
//Eject can enable when the turn table is at stand-still
requirement A_eject.c_on  needs S_turntable.On;
requirement A_eject.c_on  needs A_turntable.Off;
requirement A_eject.c_on  needs Timer.Timeout;

//Eject can enable when there is a product at exit
requirement A_eject.c_on  needs S_atexit.On;

//Eject can enable when the sorting station is ready
//requirement A_eject.c_on  needs S_sortingbusy.Off;

//Eject can disable when the product is released
requirement A_eject.c_off needs S_atexit.Off;

//The processing station is ready when it is at stand-still and there is no product at the input
//requirement A_processingready.c_on  needs S_turntable.On;
//requirement A_processingready.c_on  needs S_atinput.Off;

//The processing station is busy when the turn table is not at stand-still or there is a product at the input
//requirement A_processingready.c_off needs S_turntable.Off or S_atinput.On;
requirement A_processingready.c_on needs false;
