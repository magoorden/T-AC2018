uncontrollable cod_er;
uncontrollable cod_ser;
controllable inc_ctr_WSP;
controllable reset_ctr_WSP;
uncontrollable ctr_ge_max_WSP;
uncontrollable ctr_lt_max_WSP;
controllable MER_an_FT;
controllable MER_an_BT;
controllable MER_an_HT;
controllable MER_aus_FT;
controllable MER_aus_BT;
controllable MER_aus_HT;
controllable MVR_an_HT;
controllable MVR_aus_HT;
controllable MVR_an_FT;
controllable MVR_an_BT;
controllable MVR_aus_FT;
controllable MVR_aus_BT;
uncontrollable STZV_FT;
uncontrollable STZV_BT;
controllable MZS_an_HT;
controllable MZS_aus_HT;
controllable time_WSP;
controllable time_FS;
controllable reset_WSP;
controllable reset_FS;
uncontrollable timeout_WSP;
uncontrollable timeout_FS;
uncontrollable tuer_zu_FT;
uncontrollable tuer_zu_BT;
uncontrollable tuer_zu_HT;
uncontrollable tuer_auf_FT;
uncontrollable tuer_auf_BT;
uncontrollable tuer_auf_HT;
controllable time_W_FT;
controllable time_ER_FT;
controllable time_VR_FT;
controllable time_ZS_FT;
controllable reset_FT;
controllable time_W_BT;
controllable time_ER_BT;
controllable time_VR_BT;
controllable time_ZS_BT;
controllable reset_BT;
controllable time_W_HT;
controllable time_ER_HT;
controllable time_VR_HT;
controllable time_ZS_HT;
controllable reset_HT;
uncontrollable timeout_FT;
uncontrollable timeout_BT;
uncontrollable timeout_HT;
uncontrollable zuendung_an;
uncontrollable zuendung_aus;
controllable soft_ER;
controllable soft_SER_FT;
controllable SERFS;
controllable soft_CS;
controllable ER;
controllable SER;
controllable ZS;
controllable TAST;
controllable wsp;
controllable soft_VR;
controllable soft_ZS;
controllable autom_VR;
controllable is_cod_er;
controllable is_cod_ser;
controllable done_ZS;
controllable CS_ok;
uncontrollable CS;
controllable ZSA;
controllable ZSI;
uncontrollable ER_FT;
uncontrollable ER_BT;
uncontrollable ER_HK;
uncontrollable ER_FS;
uncontrollable VR_FT;
uncontrollable VR_BT;
uncontrollable VR_HK;
uncontrollable VR_FS;
uncontrollable TASTVR;
controllable kein_ZS;
controllable start_ER_FT;
controllable stop_ER_FT;
controllable done_ER;
controllable done_SER_FT;
controllable start_VR_FT;
controllable stop_VR_FT;
controllable done_VR;
controllable start_ZS_FT;
controllable stop_ZS_FT;
controllable sync_FT;
controllable async_FT;
controllable start_ER_BT;
controllable stop_ER_BT;
controllable start_VR_BT;
controllable stop_VR_BT;
controllable start_ZS_BT;
controllable stop_ZS_BT;
controllable sync_BT;
controllable async_BT;
controllable start_ER_HT;
controllable stop_ER_HT;
controllable start_VR_HT;
controllable stop_VR_HT;
controllable start_ZS_HT;
controllable stop_ZS_HT;
controllable sync_HT;
controllable async_HT;
plant automaton timer_FS:
  location IDLE:
    initial;
    marked;
    edge time_FS goto RUN;
  location RUN:
    edge reset_FS, timeout_FS goto IDLE;
end
plant automaton tklemme_FT:
  location AUF:
    initial;
    edge tuer_zu_FT goto ZU;
  location ZU:
    marked;
    edge tuer_auf_FT goto AUF;
end
plant automaton tklemme_BT:
  location AUF:
    initial;
    edge tuer_zu_BT goto ZU;
  location ZU:
    marked;
    edge tuer_auf_BT goto AUF;
end
plant automaton tklemme_HT:
  location AUF:
    initial;
    edge tuer_zu_HT goto ZU;
  location ZU:
    marked;
    edge tuer_auf_HT goto AUF;
end
plant automaton zuendung:
  location IDLE:
    initial;
    marked;
    edge zuendung_an goto RUN;
  location RUN:
    edge zuendung_aus goto IDLE;
end
plant automaton P1:
  location:
    initial;
    marked;
    edge soft_ER;
end
plant automaton P2:
  location:
    initial;
    marked;
    edge soft_SER_FT;
end
plant automaton P3:
  location:
    initial;
    marked;
    edge SERFS;
end
plant automaton P4:
  location:
    initial;
    marked;
    edge soft_CS;
end
plant automaton P5:
  location:
    initial;
    marked;
    edge ER;
end
plant automaton P6:
  location:
    initial;
    marked;
    edge SER;
end
plant automaton P7:
  location:
    initial;
    marked;
    edge ZS;
end
plant automaton P8:
  location:
    initial;
    marked;
    edge TAST;
end
plant automaton P9:
  location:
    initial;
    marked;
    edge wsp;
end
plant automaton P10:
  location:
    initial;
    marked;
    edge soft_VR;
end
plant automaton P11:
  location:
    initial;
    marked;
    edge soft_ZS;
end
plant automaton P12:
  location:
    initial;
    marked;
    edge autom_VR;
end
plant automaton P13:
  location:
    initial;
    marked;
    edge is_cod_er;
end
plant automaton P14:
  location:
    initial;
    marked;
    edge is_cod_ser;
end
plant automaton P15:
  location:
    initial;
    marked;
    edge done_ZS;
end
plant automaton P16:
  location:
    initial;
    marked;
    edge CS_ok;
end
plant automaton P18:
  location:
    initial;
    marked;
    edge ZSA;
end
plant automaton P19:
  location:
    initial;
    marked;
    edge ZSI;
end
plant automaton P20:
  location:
    initial;
    marked;
    edge ER_FT;
end
plant automaton P21:
  location:
    initial;
    marked;
    edge ER_BT;
end
plant automaton P22:
  location:
    initial;
    marked;
    edge ER_HK;
end
plant automaton P23:
  location:
    initial;
    marked;
    edge ER_FS;
end
plant automaton P24:
  location:
    initial;
    marked;
    edge VR_FT;
end
plant automaton P25:
  location:
    initial;
    marked;
    edge VR_BT;
end
plant automaton P26:
  location:
    initial;
    marked;
    edge VR_HK;
end
plant automaton P27:
  location:
    initial;
    marked;
    edge VR_FS;
end
plant automaton P28:
  location:
    initial;
    marked;
    edge TASTVR;
end
plant automaton P29:
  location:
    initial;
    marked;
    edge kein_ZS;
end
plant automaton P31:
  location:
    initial;
    marked;
    edge stop_ER_FT;
end
plant automaton P32:
  location:
    initial;
    marked;
    edge done_ER;
end
plant automaton P33:
  location:
    initial;
    marked;
    edge done_SER_FT;
end
plant automaton P34:
  location:
    initial;
    marked;
    edge start_VR_FT;
end
plant automaton P36:
  location:
    initial;
    marked;
    edge done_VR;
end
plant automaton P37:
  location:
    initial;
    marked;
    edge start_ZS_FT;
end
plant automaton P39:
  location:
    initial;
    marked;
    edge sync_FT;
end
plant automaton P40:
  location:
    initial;
    marked;
    edge async_FT;
end
plant automaton P42:
  location:
    initial;
    marked;
    edge stop_ER_BT;
end
plant automaton P43:
  location:
    initial;
    marked;
    edge start_VR_BT;
end
plant automaton P45:
  location:
    initial;
    marked;
    edge start_ZS_BT;
end
plant automaton P47:
  location:
    initial;
    marked;
    edge sync_BT;
end
plant automaton P48:
  location:
    initial;
    marked;
    edge async_BT;
end
plant automaton P50:
  location:
    initial;
    marked;
    edge stop_ER_HT;
end
plant automaton P51:
  location:
    initial;
    marked;
    edge start_VR_HT;
end
plant automaton P53:
  location:
    initial;
    marked;
    edge start_ZS_HT;
end
plant automaton P55:
  location:
    initial;
    marked;
    edge sync_HT;
end
plant automaton P56:
  location:
    initial;
    marked;
    edge async_HT;
end
supervisor automaton automvr:
  location VR:
    initial;
    marked;
    edge soft_ER, soft_SER_FT goto lER;
    edge SERFS goto FS;
    edge soft_CS, tuer_auf_BT, tuer_auf_FT, tuer_auf_HT goto lER;
    edge ER, SER, ZS, TAST, wsp, soft_VR, soft_ZS, reset_FS, timeout_FS;
  location lER:
    marked;
    edge soft_VR, soft_ZS goto VR;
    edge soft_CS, tuer_auf_BT, tuer_auf_FT, tuer_auf_HT goto lER;
    edge ER, SER, ZS, TAST, wsp, soft_ER, soft_SER_FT, reset_FS, timeout_FS;
  location FS:
    edge wsp, ER, SER, ZS, TAST goto VR;
    edge soft_CS, tuer_auf_BT, tuer_auf_FT, tuer_auf_HT goto lER;
    edge soft_ER, soft_SER_FT goto AU1;
    edge reset_FS, timeout_FS;
  location AU1:
    edge time_FS goto AU2;
    edge ER, SER, ZS, TAST goto lER;
    edge soft_CS, tuer_auf_BT, tuer_auf_FT, tuer_auf_HT goto lER;
    edge SERFS, reset_FS, timeout_FS;
  location AU2:
    edge timeout_FS goto AU3;
    edge ER, SER, ZS, TAST goto lER;
    edge soft_CS, tuer_auf_BT, tuer_auf_FT, tuer_auf_HT goto lER;
    edge SERFS;
  location AU3:
    edge autom_VR goto VR;
    edge ER, SER, ZS, TAST goto lER;
    edge soft_CS, tuer_auf_BT, tuer_auf_FT, tuer_auf_HT goto lER;
    edge SERFS;
end
supervisor automaton decoder:
  location IN:
    initial;
    edge SER, SERFS goto COD;
    edge ER goto RQER;
    edge TAST goto RQVR;
    edge ZS goto TSTZS;
    edge soft_CS goto lER;
  location RQSER:
    edge soft_SER_FT goto lSER;
    edge soft_CS goto lER;
  location RQER:
    edge soft_ER goto lER;
    edge soft_CS goto lER;
  location RQVR:
    edge soft_VR goto VR;
    edge soft_CS goto lER;
  location RQZS:
    edge soft_ZS goto lZS;
    edge soft_CS goto lER;
  location COD:
    edge is_cod_ser goto RQSER;
    edge is_cod_er goto RQER;
    edge soft_CS goto lER;
  location TSTZS:
    edge ZSA goto RQZS;
    edge ZSI goto RQVR;
    edge soft_CS goto lER;
  location lSER:
    marked;
    edge ER, SER, SERFS, TAST goto RQER;
    edge autom_VR goto RQVR;
    edge ZS goto TSTZS;
    edge soft_CS goto lER;
  location lER:
    marked;
    edge ER, SER, SERFS goto RQER;
    edge TAST, autom_VR goto RQVR;
    edge ZS goto TSTZS;
    edge soft_CS goto lER;
  location VR:
    marked;
    edge SER, SERFS goto COD;
    edge ER, TAST goto RQER;
    edge ZS goto TSTZS;
    edge soft_CS goto lER;
  location lZS:
    marked;
    edge ZS, TAST goto RQZS;
    edge ER goto RQER;
    edge SER, SERFS goto COD;
    edge soft_CS goto lER;
end
supervisor automaton eingabe_er:
  location IN:
    initial;
    marked;
    edge ER_BT, ER_HK goto lER;
    edge soft_CS goto C1;
    edge ER_FT;
    edge ER_FS;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
    edge TASTVR;
  location lER:
    edge soft_CS goto C1;
    edge ER_FT, ER_FS, VR_FT, VR_BT, VR_HK, VR_FS, TASTVR, ER, wsp goto IN;
    edge ER_BT;
    edge ER_HK;
  location C1:
    edge ER_FT, ER_BT, ER_HK goto C2;
    edge ER_FS;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
    edge TASTVR;
  location C2:
    edge CS_ok goto IN;
    edge ER_FT;
    edge ER_BT;
    edge ER_HK;
    edge ER_FS;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
    edge TASTVR;
end
supervisor automaton eingabe_fs:
  location IN:
    initial;
    marked;
    edge ER_FS goto Other;
    edge ER_BT;
    edge ER_HK;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
    edge wsp;
    edge soft_CS;
    edge CS_ok;
    edge ER_FT;
    edge TASTVR;
  location Other:
    edge SERFS goto IN;
    edge ER_BT, ER_HK, VR_FT, VR_BT, VR_HK, VR_FS, wsp, soft_CS, CS_ok goto IN;
    edge ER_FT, TASTVR goto IN;
    edge ER_FS;
end
supervisor automaton eingabe_ser:
  location IN:
    initial;
    marked;
    edge ER_FT goto Other;
    edge ER_BT;
    edge ER_HK;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
    edge wsp;
    edge soft_CS;
    edge CS_ok;
    edge TASTVR;
    edge ER_FS;
  location Other:
    edge SER goto IN;
    edge ER_BT, ER_HK, VR_FT, VR_BT, VR_HK, VR_FS, wsp, soft_CS, CS_ok goto IN;
    edge TASTVR, ER_FS goto IN;
    edge ER_FT;
end
supervisor automaton eingabe_vr:
  location IN:
    initial;
    marked;
    edge TASTVR goto Other;
    edge ER_BT;
    edge ER_HK;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
    edge wsp;
    edge soft_CS;
    edge CS_ok;
    edge ER_FS;
    edge ER_FT;
  location Other:
    edge TAST goto IN;
    edge ER_BT, ER_HK, VR_FT, VR_BT, VR_HK, VR_FS, wsp, soft_CS, CS_ok goto IN;
    edge ER_FS, ER_FT goto IN;
    edge TASTVR;
end
supervisor automaton eingabe_zs:
  location IN:
    initial;
    marked;
    edge VR_FT, VR_BT, VR_HK, VR_FS goto VR;
    edge ER_FT;
    edge ER_BT;
    edge ER_HK;
    edge ER_FS;
    edge wsp;
    edge soft_CS;
    edge CS_ok;
    edge TASTVR;
  location VR:
    edge ZS, kein_ZS goto IN;
    edge ER_FT, ER_BT, ER_HK, ER_FS, wsp, soft_CS, CS_ok, TASTVR goto IN;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
end
supervisor automaton keine_wsp:
  location IDLE:
    initial;
    marked;
    edge ER_BT, ER_FS, ER_FT, ER_HK, VR_BT, VR_FS, VR_FT, VR_HK, TASTVR goto WSP;
    edge soft_CS;
  location WSP:
    edge ER, SER, SERFS, TAST, ZS, soft_CS, wsp goto IDLE;
    edge ER_BT;
    edge ER_FS;
    edge ER_FT;
    edge ER_HK;
    edge VR_BT;
    edge VR_FS;
    edge VR_FT;
    edge VR_HK;
    edge TASTVR;
end
supervisor automaton Sync_FT:
  location ASY:
    initial;
    edge stop_ER_FT goto AUF;
    edge tuer_zu_FT goto AZU;
    edge start_VR_FT, start_ZS_FT, async_FT;
  location AUF:
    edge start_VR_FT, start_ZS_FT goto ASY;
    edge tuer_zu_FT goto ZU;
    edge sync_FT, stop_ER_FT;
  location AZU:
    edge tuer_auf_FT goto ASY;
    edge stop_ER_FT goto ZU;
    edge async_FT, start_VR_FT, start_ZS_FT;
  location ZU:
    marked;
    edge tuer_auf_FT goto AUF;
    edge start_VR_FT, start_ZS_FT goto VR;
    edge sync_FT, stop_ER_FT;
  location VR:
    marked;
    edge stop_ER_FT goto ZU;
    edge tuer_auf_FT goto ASY;
    edge start_VR_FT, start_ZS_FT, sync_FT;
end
supervisor automaton Sync_BT:
  location ASY:
    initial;
    edge stop_ER_BT goto AUF;
    edge tuer_zu_BT goto AZU;
    edge start_VR_BT, start_ZS_BT, async_BT;
  location AUF:
    edge start_VR_BT, start_ZS_BT goto ASY;
    edge tuer_zu_BT goto ZU;
    edge sync_BT, stop_ER_BT;
  location AZU:
    edge tuer_auf_BT goto ASY;
    edge stop_ER_BT goto ZU;
    edge async_BT, start_VR_BT, start_ZS_BT;
  location ZU:
    marked;
    edge tuer_auf_BT goto AUF;
    edge start_VR_BT, start_ZS_BT goto VR;
    edge sync_BT, stop_ER_BT;
  location VR:
    marked;
    edge stop_ER_BT goto ZU;
    edge tuer_auf_BT goto ASY;
    edge start_VR_BT, start_ZS_BT, sync_BT;
end
supervisor automaton Sync_HT:
  location ASY:
    initial;
    edge stop_ER_HT goto AUF;
    edge tuer_zu_HT goto AZU;
    edge start_VR_HT, start_ZS_HT, async_HT;
  location AUF:
    edge start_VR_HT, start_ZS_HT goto ASY;
    edge tuer_zu_HT goto ZU;
    edge sync_HT, stop_ER_HT;
  location AZU:
    edge tuer_auf_HT goto ASY;
    edge stop_ER_HT goto ZU;
    edge async_HT, start_VR_HT, start_ZS_HT;
  location ZU:
    marked;
    edge tuer_auf_HT goto AUF;
    edge start_VR_HT, start_ZS_HT goto VR;
    edge sync_HT, stop_ER_HT;
  location VR:
    marked;
    edge stop_ER_HT goto ZU;
    edge tuer_auf_HT goto ASY;
    edge start_VR_HT, start_ZS_HT, sync_HT;
end
supervisor automaton warten:
  location IDLE:
    initial;
    marked;
    edge soft_ER, soft_SER_FT, soft_VR, soft_ZS, soft_CS goto RUN;
    edge ER, SER, SERFS, ZS, TAST, autom_VR;
  location RUN:
    edge done_ER, done_SER_FT, done_VR, done_ZS, CS_ok goto IDLE;
    edge soft_CS;
end
supervisor automaton zsi:
  location AUS2:
    initial;
    edge zuendung_an goto AN2;
    edge tuer_zu_FT, tuer_zu_BT goto AUS1;
    edge ZSA;
  location AUS1:
    edge zuendung_an goto AN1;
    edge tuer_auf_FT, tuer_auf_BT goto AUS2;
    edge tuer_zu_FT, tuer_zu_BT goto AUS0;
    edge ZSA;
  location AUS0:
    marked;
    edge tuer_auf_FT, tuer_auf_BT goto AUS1;
    edge zuendung_an goto AN0;
    edge ZSA;
  location AN2:
    edge zuendung_aus goto AUS2;
    edge tuer_zu_FT, tuer_zu_BT goto AN1;
    edge ZSI;
  location AN1:
    edge zuendung_aus goto AUS1;
    edge tuer_auf_FT, tuer_auf_BT goto AN2;
    edge tuer_zu_FT, tuer_zu_BT goto AN0;
  location AN0:
    edge tuer_auf_FT, tuer_auf_BT goto AN1;
    edge zuendung_aus goto ZU;
    edge ZSI;
  location ZU:
    edge zuendung_an goto AN0;
    edge tuer_auf_FT, tuer_auf_BT goto AUS1;
    edge ZSI;
end
supervisor automaton sup1:
  alphabet time_FS, reset_FS, soft_ER, soft_SER_FT, SERFS, soft_CS, ER, SER, ZS, TAST, wsp, soft_VR, soft_ZS, autom_VR, is_cod_er, is_cod_ser, done_ZS, CS_ok, ZSA, ZSI, kein_ZS, stop_ER_FT, done_ER, done_SER_FT, start_VR_FT, done_VR, start_ZS_FT, sync_FT, async_FT, stop_ER_BT, start_VR_BT, start_ZS_BT, sync_BT, async_BT, stop_ER_HT, start_VR_HT, start_ZS_HT, sync_HT, async_HT;
  location:
    initial;
    marked;
    edge async_BT when true;
    edge async_FT when true;
    edge async_HT when true;
    edge autom_VR when true;
    edge CS_ok when true;
    edge done_ER when true;
    edge done_SER_FT when true;
    edge done_VR when true;
    edge done_ZS when true;
    edge ER when true;
    edge is_cod_er when true;
    edge is_cod_ser when true;
    edge kein_ZS when true;
    edge reset_FS when true;
    edge SER when true;
    edge SERFS when true;
    edge soft_CS when true;
    edge soft_ER when true;
    edge soft_SER_FT when true;
    edge soft_VR when true;
    edge soft_ZS when true;
    edge start_VR_BT when true;
    edge start_VR_FT when true;
    edge start_VR_HT when true;
    edge start_ZS_BT when true;
    edge start_ZS_FT when true;
    edge start_ZS_HT when true;
    edge stop_ER_BT when true;
    edge stop_ER_FT when true;
    edge stop_ER_HT when true;
    edge sync_BT when true;
    edge sync_FT when true;
    edge sync_HT when true;
    edge TAST when true;
    edge time_FS when true;
    edge wsp when true;
    edge ZS when true;
    edge ZSA when true;
    edge ZSI when true;
end
