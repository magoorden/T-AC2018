uncontrollable cod_er;
uncontrollable cod_ser;
controllable inc_ctr_WSP;
controllable reset_ctr_WSP;
uncontrollable ctr_ge_max_WSP;
uncontrollable ctr_lt_max_WSP;
controllable MER_an_FT;
controllable MER_an_BT;
controllable MER_an_HT;
controllable MER_aus_FT;
controllable MER_aus_BT;
controllable MER_aus_HT;
controllable MVR_an_HT;
controllable MVR_aus_HT;
controllable MVR_an_FT;
controllable MVR_an_BT;
controllable MVR_aus_FT;
controllable MVR_aus_BT;
uncontrollable STZV_FT;
uncontrollable STZV_BT;
controllable MZS_an_HT;
controllable MZS_aus_HT;
controllable time_WSP;
controllable time_FS;
controllable reset_WSP;
controllable reset_FS;
uncontrollable timeout_WSP;
uncontrollable timeout_FS;
uncontrollable tuer_zu_FT;
uncontrollable tuer_zu_BT;
uncontrollable tuer_zu_HT;
uncontrollable tuer_auf_FT;
uncontrollable tuer_auf_BT;
uncontrollable tuer_auf_HT;
controllable time_W_FT;
controllable time_ER_FT;
controllable time_VR_FT;
controllable time_ZS_FT;
controllable reset_FT;
controllable time_W_BT;
controllable time_ER_BT;
controllable time_VR_BT;
controllable time_ZS_BT;
controllable reset_BT;
controllable time_W_HT;
controllable time_ER_HT;
controllable time_VR_HT;
controllable time_ZS_HT;
controllable reset_HT;
uncontrollable timeout_FT;
uncontrollable timeout_BT;
uncontrollable timeout_HT;
uncontrollable zuendung_an;
uncontrollable zuendung_aus;
controllable soft_ER;
controllable soft_SER_FT;
controllable SERFS;
controllable soft_CS;
controllable ER;
controllable SER;
controllable ZS;
controllable TAST;
controllable wsp;
controllable soft_VR;
controllable soft_ZS;
controllable autom_VR;
controllable is_cod_er;
controllable is_cod_ser;
controllable done_ZS;
controllable CS_ok;
uncontrollable CS;
controllable ZSA;
controllable ZSI;
uncontrollable ER_FT;
uncontrollable ER_BT;
uncontrollable ER_HK;
uncontrollable ER_FS;
uncontrollable VR_FT;
uncontrollable VR_BT;
uncontrollable VR_HK;
uncontrollable VR_FS;
uncontrollable TASTVR;
controllable kein_ZS;
controllable start_ER_FT;
controllable stop_ER_FT;
controllable done_ER;
controllable done_SER_FT;
controllable start_VR_FT;
controllable stop_VR_FT;
controllable done_VR;
controllable start_ZS_FT;
controllable stop_ZS_FT;
controllable sync_FT;
controllable async_FT;
controllable start_ER_BT;
controllable stop_ER_BT;
controllable start_VR_BT;
controllable stop_VR_BT;
controllable start_ZS_BT;
controllable stop_ZS_BT;
controllable sync_BT;
controllable async_BT;
controllable start_ER_HT;
controllable stop_ER_HT;
controllable start_VR_HT;
controllable stop_VR_HT;
controllable start_ZS_HT;
controllable stop_ZS_HT;
controllable sync_HT;
controllable async_HT;
plant automaton Mer_BT:
  location IDLE:
    initial;
    marked;
    edge MER_an_BT goto RUN;
  location RUN:
    edge MER_aus_BT goto IDLE;
end
plant automaton Mvrstzv_BT:
  location IDLE:
    initial;
    marked;
    edge MVR_an_BT goto RUN;
  location RUN:
    edge MVR_aus_BT goto IDLE;
    edge STZV_BT;
end
plant automaton ttimer_BT:
  location IDLE:
    initial;
    marked;
    edge time_W_BT, time_ER_BT, time_VR_BT, time_ZS_BT goto RUN;
  location RUN:
    edge reset_BT, timeout_BT goto IDLE;
end
plant automaton P1:
  location:
    initial;
    marked;
    edge soft_ER;
end
plant automaton P2:
  location:
    initial;
    marked;
    edge soft_SER_FT;
end
plant automaton P4:
  location:
    initial;
    marked;
    edge soft_CS;
end
plant automaton P10:
  location:
    initial;
    marked;
    edge soft_VR;
end
plant automaton P11:
  location:
    initial;
    marked;
    edge soft_ZS;
end
plant automaton P15:
  location:
    initial;
    marked;
    edge done_ZS;
end
plant automaton P16:
  location:
    initial;
    marked;
    edge CS_ok;
end
plant automaton P32:
  location:
    initial;
    marked;
    edge done_ER;
end
plant automaton P33:
  location:
    initial;
    marked;
    edge done_SER_FT;
end
plant automaton P36:
  location:
    initial;
    marked;
    edge done_VR;
end
plant automaton P41:
  location:
    initial;
    marked;
    edge start_ER_BT;
end
plant automaton P42:
  location:
    initial;
    marked;
    edge stop_ER_BT;
end
plant automaton P43:
  location:
    initial;
    marked;
    edge start_VR_BT;
end
plant automaton P44:
  location:
    initial;
    marked;
    edge stop_VR_BT;
end
plant automaton P45:
  location:
    initial;
    marked;
    edge start_ZS_BT;
end
plant automaton P46:
  location:
    initial;
    marked;
    edge stop_ZS_BT;
end
plant automaton P47:
  location:
    initial;
    marked;
    edge sync_BT;
end
plant automaton P48:
  location:
    initial;
    marked;
    edge async_BT;
end
supervisor automaton nftuer_BT:
  location IN:
    initial;
    edge soft_VR goto vr1;
    edge soft_ER goto er1;
    edge soft_SER_FT when false goto er1;
    edge soft_SER_FT when not false goto vr1;
    edge soft_ZS goto zs1;
    edge soft_CS goto cs1;
  location vr1:
    edge start_ER_BT goto vr2;
    edge soft_CS goto cs1;
  location vr2:
    edge stop_ER_BT goto vr3;
    edge reset_BT, timeout_BT;
    edge soft_CS goto cs1;
  location vr3:
    edge time_W_BT goto vr4;
    edge soft_CS goto cs1;
  location vr4:
    edge timeout_BT goto vr5;
    edge soft_CS goto cs1;
  location vr5:
    edge start_VR_BT goto vr6;
    edge soft_CS goto cs1;
  location vr6:
    edge stop_VR_BT goto vr7;
    edge reset_BT, timeout_BT;
    edge soft_CS goto cs1;
  location vr7:
    edge done_VR goto VR;
    edge soft_CS goto cs1;
  location VR:
    marked;
    edge soft_VR goto vr8;
    edge soft_ER goto er1;
    edge soft_SER_FT when false goto er1;
    edge soft_SER_FT when not false goto vr8;
    edge soft_ZS goto zs9;
    edge soft_CS goto cs1;
  location vr8:
    edge sync_BT goto vr7;
    edge async_BT goto vr1;
    edge soft_CS goto cs1;
  location er1:
    edge start_ER_BT goto er2;
    edge soft_CS goto cs1;
  location er2:
    edge stop_ER_BT goto er3;
    edge reset_BT, timeout_BT;
    edge soft_CS goto cs1;
  location er3:
    edge done_ER goto ER;
    edge done_SER_FT when false goto ER;
    edge soft_CS goto cs1;
  location ER:
    marked;
    edge soft_ER goto er3;
    edge soft_SER_FT when false goto er3;
    edge soft_VR goto vr5;
    edge soft_ZS goto zs5;
    edge soft_CS goto cs1;
  location zs1:
    edge start_ER_BT goto zs2;
    edge soft_CS goto cs1;
  location zs2:
    edge stop_ER_BT goto zs3;
    edge reset_BT, timeout_BT;
    edge soft_CS goto cs1;
  location zs3:
    edge time_W_BT goto zs4;
    edge soft_CS goto cs1;
  location zs4:
    edge timeout_BT goto zs5;
    edge soft_CS goto cs1;
  location zs5:
    edge start_ZS_BT goto zs6;
    edge soft_CS goto cs1;
  location zs6:
    edge stop_ZS_BT goto zs7;
    edge reset_BT, timeout_BT;
    edge soft_CS goto cs1;
  location zs7:
    edge done_ZS goto ZS;
    edge soft_CS goto cs1;
  location ZS:
    marked;
    edge soft_ZS goto zs8;
    edge soft_VR goto vr1;
    edge soft_ER goto er1;
    edge soft_SER_FT when false goto er1;
    edge soft_SER_FT when not false goto vr1;
    edge soft_CS goto cs1;
  location zs8:
    edge sync_BT goto zs7;
    edge async_BT goto zs1;
    edge soft_CS goto cs1;
  location zs9:
    edge sync_BT goto zs5;
    edge async_BT goto zs1;
    edge soft_CS goto cs1;
  location cs1:
    edge start_ER_BT goto cs2;
    edge reset_BT, timeout_BT;
  location cs2:
    edge stop_ER_BT goto cs3;
    edge timeout_BT;
  location cs3:
    edge CS_ok goto ER;
end
supervisor automaton tmotor1_BT:
  location IN:
    initial;
    marked;
    edge start_ER_BT goto er1;
    edge start_VR_BT goto vr1;
    edge start_ZS_BT goto zs1;
    edge MER_aus_BT, MVR_aus_BT, reset_BT, STZV_BT, timeout_BT;
    edge soft_CS goto IN;
  location er1:
    edge time_ER_BT goto er2;
    edge soft_CS goto IN;
  location er2:
    edge MER_an_BT goto er3;
    edge timeout_BT goto er4;
    edge soft_CS goto IN;
  location er3:
    edge timeout_BT goto er4;
    edge soft_CS goto IN;
  location er4:
    edge stop_ER_BT goto IN;
    edge MER_aus_BT;
    edge soft_CS goto IN;
  location vr1:
    edge time_VR_BT goto vr2;
    edge soft_CS goto IN;
  location vr2:
    edge MVR_an_BT goto vr3;
    edge timeout_BT goto vr5;
    edge soft_CS goto IN;
  location vr3:
    edge STZV_BT, timeout_BT goto vr4;
    edge soft_CS goto IN;
  location vr4:
    edge MVR_aus_BT goto vr5;
    edge STZV_BT, timeout_BT;
    edge soft_CS goto IN;
  location vr5:
    edge stop_VR_BT goto IN;
    edge reset_BT, timeout_BT;
    edge soft_CS goto IN;
  location zs1:
    edge time_ZS_BT goto zs2;
    edge soft_CS goto IN;
  location zs2:
    edge MVR_an_BT goto zs3;
    edge timeout_BT goto zs4;
    edge soft_CS goto IN;
  location zs3:
    edge timeout_BT goto zs4;
    edge STZV_BT;
    edge soft_CS goto IN;
  location zs4:
    edge stop_ZS_BT goto IN;
    edge MVR_aus_BT, STZV_BT;
    edge soft_CS goto IN;
end
supervisor automaton sup50:
  alphabet MER_an_BT, MER_aus_BT, MVR_an_BT, MVR_aus_BT, time_W_BT, time_ER_BT, time_VR_BT, time_ZS_BT, reset_BT, soft_ER, soft_SER_FT, soft_CS, soft_VR, soft_ZS, done_ZS, CS_ok, done_ER, done_SER_FT, done_VR, start_ER_BT, stop_ER_BT, start_VR_BT, stop_VR_BT, start_ZS_BT, stop_ZS_BT, sync_BT, async_BT;
  location:
    initial;
    marked;
    edge async_BT when true;
    edge CS_ok when true;
    edge done_ER when true;
    edge done_SER_FT when false;
    edge done_VR when true;
    edge done_ZS when true;
    edge MER_an_BT when true;
    edge MER_aus_BT when true;
    edge MVR_an_BT when true;
    edge MVR_aus_BT when true;
    edge reset_BT when true;
    edge soft_CS when true;
    edge soft_ER when true;
    edge soft_SER_FT when true;
    edge soft_VR when true;
    edge soft_ZS when true;
    edge start_ER_BT when (Mvrstzv_BT.RUN or (not nftuer_BT.IN and (not nftuer_BT.vr4 and not nftuer_BT.VR) and (not nftuer_BT.er3 and not nftuer_BT.zs3 and (not nftuer_BT.zs7 and not nftuer_BT.cs1)) or ttimer_BT.IDLE)) and Mvrstzv_BT.IDLE;
    edge start_VR_BT when true;
    edge start_ZS_BT when true;
    edge stop_ER_BT when true;
    edge stop_VR_BT when ttimer_BT.IDLE;
    edge stop_ZS_BT when true;
    edge sync_BT when true;
    edge time_ER_BT when true;
    edge time_VR_BT when true;
    edge time_W_BT when true;
    edge time_ZS_BT when true;
end
