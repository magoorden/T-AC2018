uncontrollable cod_er;
uncontrollable cod_ser;
controllable inc_ctr_WSP;
controllable reset_ctr_WSP;
uncontrollable ctr_ge_max_WSP;
uncontrollable ctr_lt_max_WSP;
controllable MER_an_FT;
controllable MER_an_BT;
controllable MER_an_HT;
controllable MER_aus_FT;
controllable MER_aus_BT;
controllable MER_aus_HT;
controllable MVR_an_HT;
controllable MVR_aus_HT;
controllable MVR_an_FT;
controllable MVR_an_BT;
controllable MVR_aus_FT;
controllable MVR_aus_BT;
uncontrollable STZV_FT;
uncontrollable STZV_BT;
controllable MZS_an_HT;
controllable MZS_aus_HT;
controllable time_WSP;
controllable time_FS;
controllable reset_WSP;
controllable reset_FS;
uncontrollable timeout_WSP;
uncontrollable timeout_FS;
uncontrollable tuer_zu_FT;
uncontrollable tuer_zu_BT;
uncontrollable tuer_zu_HT;
uncontrollable tuer_auf_FT;
uncontrollable tuer_auf_BT;
uncontrollable tuer_auf_HT;
controllable time_W_FT;
controllable time_ER_FT;
controllable time_VR_FT;
controllable time_ZS_FT;
controllable reset_FT;
controllable time_W_BT;
controllable time_ER_BT;
controllable time_VR_BT;
controllable time_ZS_BT;
controllable reset_BT;
controllable time_W_HT;
controllable time_ER_HT;
controllable time_VR_HT;
controllable time_ZS_HT;
controllable reset_HT;
uncontrollable timeout_FT;
uncontrollable timeout_BT;
uncontrollable timeout_HT;
uncontrollable zuendung_an;
uncontrollable zuendung_aus;
controllable soft_ER;
controllable soft_SER_FT;
controllable SERFS;
controllable soft_CS;
controllable ER;
controllable SER;
controllable ZS;
controllable TAST;
controllable wsp;
controllable soft_VR;
controllable soft_ZS;
controllable autom_VR;
controllable is_cod_er;
controllable is_cod_ser;
controllable done_ZS;
controllable CS_ok;
uncontrollable CS;
controllable ZSA;
controllable ZSI;
uncontrollable ER_FT;
uncontrollable ER_BT;
uncontrollable ER_HK;
uncontrollable ER_FS;
uncontrollable VR_FT;
uncontrollable VR_BT;
uncontrollable VR_HK;
uncontrollable VR_FS;
uncontrollable TASTVR;
controllable kein_ZS;
controllable start_ER_FT;
controllable stop_ER_FT;
controllable done_ER;
controllable done_SER_FT;
controllable start_VR_FT;
controllable stop_VR_FT;
controllable done_VR;
controllable start_ZS_FT;
controllable stop_ZS_FT;
controllable sync_FT;
controllable async_FT;
controllable start_ER_BT;
controllable stop_ER_BT;
controllable start_VR_BT;
controllable stop_VR_BT;
controllable start_ZS_BT;
controllable stop_ZS_BT;
controllable sync_BT;
controllable async_BT;
controllable start_ER_HT;
controllable stop_ER_HT;
controllable start_VR_HT;
controllable stop_VR_HT;
controllable start_ZS_HT;
controllable stop_ZS_HT;
controllable sync_HT;
controllable async_HT;
plant automaton zuendung:
  location IDLE:
    initial;
    marked;
    edge zuendung_an goto RUN;
  location RUN:
    edge zuendung_aus goto IDLE;
end
plant automaton P1:
  location:
    initial;
    marked;
    edge soft_ER;
end
plant automaton P2:
  location:
    initial;
    marked;
    edge soft_SER_FT;
end
plant automaton P4:
  location:
    initial;
    marked;
    edge soft_CS;
end
plant automaton P10:
  location:
    initial;
    marked;
    edge soft_VR;
end
plant automaton P15:
  location:
    initial;
    marked;
    edge done_ZS;
end
plant automaton P16:
  location:
    initial;
    marked;
    edge CS_ok;
end
plant automaton P17:
  location:
    initial;
    marked;
    edge CS;
end
supervisor automaton crash:
  location IN:
    initial;
    marked;
    edge zuendung_an goto RUN;
    edge done_ZS goto ZS;
    edge soft_ER, soft_SER_FT, soft_VR, CS;
  location ZS:
    marked;
    edge soft_ER, soft_SER_FT, soft_VR goto IN;
    edge zuendung_an goto XX;
    edge done_ZS, CS;
  location RUN:
    edge zuendung_aus goto IN;
    edge done_ZS goto XX;
    edge CS goto CS1;
    edge soft_ER, soft_SER_FT, soft_VR;
  location XX:
    edge soft_ER, soft_SER_FT, soft_VR goto RUN;
    edge zuendung_aus goto ZS;
    edge done_ZS, CS;
  location CS1:
    edge zuendung_aus goto CS1a;
    edge soft_CS goto CS2;
    edge CS;
  location CS2:
    edge zuendung_aus goto CS2a;
    edge CS_ok goto RUN;
    edge CS;
  location CS1a:
    edge zuendung_an goto CS1;
    edge soft_CS goto CS2a;
    edge CS;
  location CS2a:
    edge zuendung_an goto CS2;
    edge CS_ok goto IN;
    edge CS;
end
supervisor automaton sup77:
  alphabet soft_ER, soft_SER_FT, soft_CS, soft_VR, done_ZS, CS_ok;
  location:
    initial;
    marked;
    edge CS_ok when true;
    edge done_ZS when true;
    edge soft_CS when true;
    edge soft_ER when true;
    edge soft_SER_FT when true;
    edge soft_VR when true;
end
